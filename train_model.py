import numpy as np 
import pandas as pd
import tensorflow as tf 
from sklearn.externals import joblib

import keras
from keras.models import Sequential

from keras.layers import Dense, Dropout
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.models import load_model


def train_network_architecture(train_data,train_labels,test_data,test_labels,epochs,batch_size,load_model):
    if load_model == False:  
        model = Sequential()
        model.add(Dense(units=200,input_shape=[232],activation='relu'))
        model.add(Dropout(0.3))
        model.add(Dense(units=50,activation='relu'))
        model.add(Dropout(0.2))
        model.add(Dense(units=10,activation='relu'))
        model.add(Dense(units=1,activation='sigmoid'))

        optimizer = Adam(lr=0.01,decay=0.0)
        early = EarlyStopping(monitor='val_loss',min_delta=0,patience=3)
        model_check = ModelCheckpoint('best_model.h5',monitor='val_loss',save_best_only=True,save_weights_only=False)
        callback_list = [early,model_check]
        model.compile(optimizer=optimizer,loss='mean_squared_error',metrics=['accuracy'])

        model.fit(train_data,train_labels,batch_size=batch_size,epochs=epochs,validation_data=(test_data,test_labels),callbacks=callback_list)
        
    else:
        model = load_model('best_model.h5')
        model.fit(train_data,train_labels,batch_size=batch_size,epochs=epochs,validation_data=(test_data,test_labels),callbacks=callback_list)
    return True

def main():
    df_train = pd.read_pickle('C:\\Users\\lenovo\\Desktop\\project\\train_data.pkl')
    df_test = pd.read_pickle('C:\\Users\\lenovo\\Desktop\\project\\test_data.pkl')


    train_x = np.array(list(df_train['transform_data'])).reshape((len(df_train),232))

    train_y=np.array(list(df_train['labels']))

    test_x = np.array(list(df_test['transform_data'])).reshape((len(df_test),232))
    test_y = np.array(list(df_test['labels']))


    train_network_architecture(train_x,train_y,test_x,test_y,100,100,False)
    return True
main()

